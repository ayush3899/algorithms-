#include<bits/stdc++.h>
using namespace std;
#define d 256

void rabink(char *pat,char *txt,int prime)
{
  int m=strlen(pat);
  int n=strlen(txt);
  int i,j;
  int hp=0;
  int ht=0;
  int h=1;

  for(i=0;i<m-1;i++)
  {
    h=(h%d)%prime;
  }
  for(i=0;i<m;i++)
  {
    hp=(pat[i]+d*hp)%prime;
    ht=(txt[i]+d*ht)%prime;
  }
  for(i=0;i<=n-m;i++)
  {
    if(hp==ht)
    {
      for(j=0;j<m;j++)
      {
        if(txt[i+j]!=pat[j])
        break;
      }
      if(j==m)
      {
        printf("pattern found at index\n",i);
      }
    }
    if(i<n-m)
    {
      ht=(d*(ht-txt[i]*h)+txt[i+m])%prime;
      if(ht<0)
      ht=(ht+prime);
    }
  }

}

int main()
{
  char s1[100],s2[100];
	cin>>s1;
	cin>>s2;
  int prime;
  cin>>prime;
  rabink(s1,s2,prime);
}
//
#include <iostream>
#include <cstdio>
#include <string>
#include<bits/stdc++.h>
using namespace std;

void rabinKarp(string str, string pat) 
{
    if (str.length() && pat.length())
    {          // check for empty strings
        int n = str.length();
        int m = pat.length();
        int i, j;                                // iterators for loops
        int s = 0, p = 0;                        // s = hash of string, p = hash of pattern
        const int pm = 256;                      // no of characters in alphabet
        const int q = 101;                       // large prime number
        int h = 1;                               // h = multiplier for MSB
        bool flag = false;

        // the value of h would be eqv to pow(pm, m-1)
        for (i = 0; i < m-1; i++)
            h = (h * pm) % q;

        // calculating initial hash for string and pattern
        for (i = 0; i < m; i++) 
        {
            s = (pm * s + str[i]) % q;
            p = (pm * p + pat[i]) % q;
        }

        for (i = 0; i <= n-m; i++) {
            if (s == p) {                       // comparing hash of string and pattern
                for (j = 0; j < m; j++)
                    if (str[i+j] != pat[j])
                        break;
                if (j == m) {
                    cout<<"Pattern found at pos: "<<i+1<<endl;
                    flag = true;
                }
            }
            // calculating hash of next substring
            s = (pm * (s - h * str[i]) + str[i+m]) % q;
            if (s < 0)                          
                s = s + q;
        }
        if (!flag)
            cout<<"Pattern not found.."<<endl;
        return;
    }
    cout<<"Text or pattern cannot be empty.."<<endl;
    return;
}

int main() {
 
    string str, pat;
    getline(cin, str);
    getline(cin, pat);
    rabinKarp(str, pat);
    return 0;
}



