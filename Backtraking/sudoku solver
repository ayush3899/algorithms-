#include<bits/stdc++.h>
using namespace std;
#define N 9

bool Row(int grid[N][N], int row, int num)
{
    //used for row
    for (int col = 0; col < N; col++)
		if (grid[row][col] == num)
			return true;
	return false;
}

bool Col(int grid[N][N], int col, int num)
{
	//used for column
	for (int row = 0; row < N; row++)
	if (grid[row][col] == num)
		return true;
	return false;
}

bool Box(int grid[N][N], int bcol, int brow, int num)
{
	//used for boxes
	for (int row = 0; row < 3; row++)
	for (int col = 0; col < 3; col++)
		if (grid[row+brow][col+bcol] == num)
			return true;
	return false;
	
}


bool unasspos(int grid[N][N], int &row, int &col)
{
	for (row = 0; row < N; row++)
		for (col = 0; col < N; col++)
			if (grid[row][col] == 0)
				return true;
	return false;
}

bool isSafe(int grid[N][N], int row, int col, int num)
{
     return !Row(grid, row, num) &&!Col(grid, col, num) &&!Box(grid, row - row%3 , col - col%3, num);
}


bool sud(int grid[N][N])
{
	int row, col;
	if (!unasspos(grid, row, col))
	    return true;

	for (int num = 1; num <= 9; num++)
	{
		if (isSafe(grid, row, col, num))
		{
			grid[row][col] = num;
			if (sud(grid))
				return true;
				
			grid[row][col] = 0 ;
		}
	}
	return false; 
}

void printGrid(int grid[N][N])
{
	for (int row = 0; row < N; row++)
	{
	for (int col = 0; col < N; col++)
			printf("%2d", grid[row][col]);
		printf("\n");
	}
}

int main()
{

	int grid[N][N] = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
					{5, 2, 0, 0, 0, 0, 0, 0, 0},
					{0, 8, 7, 0, 0, 0, 0, 3, 1},
					{0, 0, 3, 0, 1, 0, 0, 8, 0},
					{9, 0, 0, 8, 6, 3, 0, 0, 5},
					{0, 5, 0, 0, 9, 0, 6, 0, 0},
					{1, 3, 0, 0, 0, 0, 2, 5, 0},
					{0, 0, 0, 0, 0, 0, 0, 7, 4},
					{0, 0, 5, 2, 0, 6, 3, 0, 0}};
	if (sud(grid) == true)
		printGrid(grid);
	else
		printf("No solution exists");

	return 0;
}
